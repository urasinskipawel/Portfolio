---
import { navItems } from '@/constants/constants';
---

<div class='flex justify-center w-full'>
	<nav
		id='main-nav'
		class='fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%]'>
		<div class='container mx-auto flex justify-center items-center p-3'>
			<ul class='flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6'>
				{
					navItems.map(item => (
						<li class='flex-1 md:flex-none'>
							<a
								href={item.href}
								class='flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group'>
								<div class='absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[var(--blue)] nav-indicator hidden md:block' />
								<span class='md:hidden flex items-center justify-center w-6 h-6'>
									<item.icon />
								</span>
								<span class='hidden md:inline-block'>{item.label}</span>
								<span class='md:hidden'>{item.label}</span>
							</a>
						</li>
					))
				}
			</ul>
		</div>
	</nav>
</div>

<script>
	const nav = document.getElementById('main-nav');
	const maxScroll = 1000;
	let rafId: number | null = null;

	function updateNav() {
		if (window.scrollY > 0) {
			nav?.classList.add('scrolling');

			const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
			const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);

			const minWidth = 528;
			const maxWidth = window.innerWidth * 0.8;
			const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;

			if (window.innerWidth >= 768) {
				nav?.style.setProperty('width', `${currentWidth}px`);
			}
		} else {
			nav?.classList.remove('scrolling');
			nav?.style.setProperty('width', '80%');
		}
		rafId = null;
	}

	window.addEventListener(
		'scroll',
		() => {
			if (!rafId) {
				rafId = requestAnimationFrame(updateNav);
			}
		},
		{ passive: true }
	);

	document.querySelectorAll('a[href^="#"]').forEach(anchor => {
		anchor.addEventListener('click', function (e) {
			e.preventDefault();
			const target = e.currentTarget as HTMLAnchorElement;
			const targetId = target.getAttribute('href')?.substring(1) || '';
			const targetElement = document.getElementById(targetId);
			if (targetElement) {
				targetElement.scrollIntoView({
					behavior: 'smooth',
				});
			}
		});
	});

	document.addEventListener('DOMContentLoaded', () => {
		const sections = document.querySelectorAll('section[id]');
		const navLinks = document.querySelectorAll("nav a[href^='#']");
		const observerOptions = { threshold: 0.3 };

		const observerCallback = entries => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					navLinks.forEach(link => link.classList.remove('active'));
					const id = entry.target.getAttribute('id');
					const activeLink = document.querySelector(`nav a[href="#${id}"]`);
					if (activeLink) {
						activeLink.classList.add('active');
					}
				}
			});
		};

		const observer = new IntersectionObserver(observerCallback, observerOptions);
		sections.forEach(section => observer.observe(section));
	});
</script>
